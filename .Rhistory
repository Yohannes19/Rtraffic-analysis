geom_bar(stat = "count", fill = "blue", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Month",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = month.name)  # Replace the x-axis labels with month names
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
accidents_month<-perform_monthly_analysis(accidents2017)
p <- ggplot(accidents_month, aes(x = month, y = num_accidents)) +
geom_bar(stat = identity, fill = "blue", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Month",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = month.name)  # Replace the x-axis labels with month names
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
accidents_month<-perform_monthly_analysis(accidents2017)
p <- ggplot(accidents_month, aes(x = month, y = count)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Month",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = month.name)  # Replace the x-axis labels with month names
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
accidents_month<-perform_monthly_analysis(accidents2017)
p <- ggplot(accidents_month, aes(x = month, y =after_stat(count))) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Month",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = month.name)  # Replace the x-axis labels with month names
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
accidents_month<-perform_monthly_analysis(accidents2017)
p <- ggplot(accidents_month, aes(x = month, y =..count..)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Month",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = month.name)  # Replace the x-axis labels with month names
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
document()
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
accidents_month<-perform_monthly_analysis(accidents2017)
accidents_month
# Print the plot
#print(p)
document()
perform_monthly_analysis(accidents2017)
document()
perform_monthly_analysis(accidents2017)
document()
perform_monthly_analysis(accidents2017)
document()
perform_monthly_analysis(accidents2017)
document()
perform_monthly_analysis(accidents2017)
document()
perform_monthly_analysis(accidents2017)
# The observed decrease in the number of accidents during August and December can be attributed to seasonal variations in traffic patterns. In August, the "summer vacation effect" likely leads to fewer people commuting to work, resulting in reduced traffic volume and a lower likelihood of accidents. Similarly, in December, festive holidays and social gatherings may lead to decreased work-related travel and fewer vehicles on the road during specific days or hours. While weather conditions and law enforcement efforts may also influence accident rates during these months, the overall trend highlights the importance of considering seasonal factors in road safety measures. Policymakers and traffic safety experts should remain vigilant in adapting strategies to ensure road users' well-being during periods of varying traffic activity.
perform_monthly_analysis(accidents2017)
#accidents_month
# Print the plot
#print(p)
accidents_data <-perform_eachday_year(accidents2017)
p <- ggplot(accidents_data, aes(x = date, y = num_accidents)) +
geom_line(color = "blue") +
geom_point(data = filter(accidents_data, weekdays(date) == "Sunday"), aes(color = "Sunday", shape = "Sunday"), size = 3, show.legend = TRUE) +
geom_point(data = filter(accidents_data, weekdays(date) == "Friday"), aes(color = "Friday", shape = "Friday"), size = 3, show.legend = TRUE) +
labs(title = "Accidents in Barcelona in 2017",
x = "Date",
y = "Number of accidents per day",
color = "Day of the Week",
shape = "Day of the Week") +
scale_color_manual(values = c("Sunday" = "green", "Friday" = "red")) +
scale_shape_manual(values = c("Sunday" = 16, "Friday" = 17)) +
theme_minimal()
# Set the figure size
# options(repr.plot.width = 13, repr.plot.height = 8)
# Print the plot
print(p)
#Display all the accidents data on the study area
ggplot(accidents2017) +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(alpha = 0.1) +
theme_minimal()
#Display all the accidents data on the study area
ggplot(accidents2017) +
ggspatial::annotation_map_tile(type = "carto", zoomin = 0, quiet = TRUE) +
geom_sf(alpha = 0.1) +
theme_minimal()
#Display all the accidents data on the study area,
ggplot(accidents2017) +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(alpha = 0.1,size=5) +
theme_minimal()
#Display all the accidents data on the study area,
ggplot(accidents2017) +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(alpha = 0.1,size=2) +
theme_minimal()
devtools::load_all(".")
#to display the animated heatmap for the
library(gifski)
library(av)
library(gganimate)
library(ggtext)
library(mapmate)
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knit_print.gif_image("heatmap_animation.gif")
#to display the animated heatmap for the
library(gifski)
library(av)
library(gganimate)
library(ggtext)
library(mapmate)
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
my_options <- list(ani.width = 800, ani.height = 600)
knit_print.gif_image("heatmap_animation.gif",my_options)
devtools::load_all(".")
library(devtools)
document()
library(TrafficAnalysis)
results <-perform_hotspot_kde(accidents2017)
ggplot() +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(
mapping = aes(fill = kde),
data = results,
alpha = 0.75,
colour = NA
) +
scale_fill_distiller(direction = 1)
library(leaflet)
#
results<-Perform_hotspotsf(accidents2017)
results %>%
filter(gistar > 0, pvalue < 0.05) %>%
ggplot(aes(colour = kde, fill = kde)) +
geom_sf() +
scale_colour_distiller(aesthetics = c("colour", "fill"), direction = 1) +
labs(title = "Density of Accidents in Barcelona, 2017") +
theme_void()
#The function hotspot_count()  produces an SF object with counts for the number of points in (by default) each cell in a grid of cells
hotspotcount <- perform_hotspot_count(accidents2017)
ggplot() +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(
mapping = aes(fill = n),
data = hotspotcount,
alpha = 0.75,
colour = NA
) +
scale_fill_distiller(direction = 1)
#Location based Analysis
Display_Serious_injuries(accidents2017)
Display_clusteraccident_serious()
Display_clusteraccident_serious(accidents2017)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("png")
install.packages("png")
library(png)
library(TrafficAnalysis)
remove.packages(av)
remove.packages("av")
install.packages("gifski")
install.packages("gifski")
library()
document()
library(devtools)
document()
#to display the animated heatmap for the
library(gifski)
library(av)
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(mapmate)
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
library(mapmate)
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knitr::include_graphics("heatmap_animation.gif")
document()
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
library(mapmate)
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knitr::include_graphics("heatmap_animation.gif")
p <- ggplot(mtcars, aes(mpg, wt, color = factor(cyl))) +
geom_point() +
transition_states(cyl, wrap = FALSE) +
enter_fade() + exit_fade()
# Render the animation using gifski_renderer()
animated_plot <- animate(p, renderer = gifski_renderer())
# View the animation
print(animated_plot)
p <- ggplot(mtcars, aes(mpg, wt, color = factor(cyl))) +
geom_point() +
transition_states(cyl, wrap = FALSE) +
enter_fade() + exit_fade()
# Render the animation using gifski_renderer()
animated_plot <- animate(p, renderer = gifski_renderer())
# View the animation
animated_plot
knitr::include_graphics(animated_plot)
rm(list = ls())
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
animation::use_renderer(gifski_renderer())
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
#animation::use_renderer(gifski_renderer())
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knitr::include_graphics("heatmap_animation.gif")
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
#animation::use_renderer(gifski_renderer())
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knitr::include_graphics("heatmap_animation.gif")
devtools::load_all(".")
#loading the necessary libraries
library(TrafficAnalysis)
library(sf)
library(leaflet)
library(tidyverse)
library(gganimate)
library(gifski)
library(ggtext)
view(accidents2017)
usethis::use_package("ggtext")
library(devtools)
devtools::check()
document()
document()
devtools::check()
#After naking the monthly anaylsis of the accident, its important to see the distribution of the accidents in the weekdays to understant the patterns in which the accidents are likely happen and , Based on the result the accidents are so down in the weekends days ,it make sense because most of the perople are not going work at weekend days and in the accidents are high on fridays the reason is that in fridays many went for paraty.
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes_string(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#After naking the monthly anaylsis of the accident, its important to see the distribution of the accidents in the weekdays to understant the patterns in which the accidents are likely happen and , Based on the result the accidents are so down in the weekends days ,it make sense because most of the perople are not going work at weekend days and in the accidents are high on fridays the reason is that in fridays many went for paraty.
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
#From the above information, sunday is the day where the lowest accident recoreded and Fridays is the highest accident recoreded, so it make sense to see the number of each accidents per each days of the year. From the result we got
accidents_data <-perform_eachday_year(accidents2017)
p <- ggplot(accidents_data, aes_string(x = date, y = num_accidents)) +
geom_line(color = "blue") +
geom_point(data = filter(accidents_data, weekdays(date) == "Sunday"), aes(color = "Sunday", shape = "Sunday"), size = 3, show.legend = TRUE) +
geom_point(data = filter(accidents_data, weekdays(date) == "Friday"), aes(color = "Friday", shape = "Friday"), size = 3, show.legend = TRUE) +
labs(title = "Accidents in Barcelona in 2017",
x = "Date",
y = "Number of accidents per day",
color = "Day of the Week",
shape = "Day of the Week") +
scale_color_manual(values = c("Sunday" = "green", "Friday" = "red")) +
scale_shape_manual(values = c("Sunday" = 16, "Friday" = 17)) +
theme_minimal()
document()
devtools::check()
document()
usethis::edit_r_environ()
devtools::load_all(".")
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
#animation::use_renderer(gifski_renderer())
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
library(TrafficAnalysis)
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
#animation::use_renderer(gifski_renderer())
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
library(tidyverse)
Display_AnimatedHeatMap(accidents2017)
document()
library(devtools)
document()
Display_AnimatedHeatMap(accidents2017)
document()
#to display the animated heatmap for the
library(gifski)
library(gganimate)
library(ggtext)
#animation::use_renderer(gifski_renderer())
animated_heatmap<-Display_AnimatedHeatMap(accidents2017)
anim_save("heatmap_animation.gif", animation = animated_heatmap,
ani.width = 800, ani.height = 600,
title = "Accidents Heatmap Animation")
#my_options <- list(ani.width = 800, ani.height = 600)
knitr::include_graphics("heatmap_animation.gif")
devtools::check()
#From the above information, sunday is the day where the lowest accident recoreded and Fridays is the highest accident recoreded, so it make sense to see the number of each accidents per each days of the year. From the result we got
accidents_data <-perform_eachday_year(accidents2017)
p <- ggplot(accidents_data, aes(x = date, y = num_accidents)) +
geom_line(color = "blue") +
geom_point(data = filter(accidents_data, weekdays(date) == "Sunday"), aes(color = "Sunday", shape = "Sunday"), size = 3, show.legend = TRUE) +
geom_point(data = filter(accidents_data, weekdays(date) == "Friday"), aes(color = "Friday", shape = "Friday"), size = 3, show.legend = TRUE) +
labs(title = "Accidents in Barcelona in 2017",
x = "Date",
y = "Number of accidents per day",
color = "Day of the Week",
shape = "Day of the Week") +
scale_color_manual(values = c("Sunday" = "green", "Friday" = "red")) +
scale_shape_manual(values = c("Sunday" = 16, "Friday" = 17)) +
theme_minimal()
# Set the figure size
# options(repr.plot.width = 13, repr.plot.height = 8)
# Print the plot
print(p)
devtools::load_all(".")
perform_count_accidents(accidents2017)
library(TrafficAnalysis)
perform_count_accidents(accidents2017)
calculate_summary_stats(accidents2017)
devtools::load_all(".")
library(devtools)
document()
library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
view(accidents2017)
library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
perform_weekdays_analysis(accidents2017)
jj<-perform_weekdays_analysis(accidents2017)
jj
#library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#library(viridis)
perform_weekdays_analysis(accidents2017)
# image(p,col=viridis(200))
perform_weekdays_analysis(accidents2017)
jj<-perform_weekdays_analysis(accidents2017)
jj
document()
load_all()
#library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
# image(p,col=viridis(200))
document()
#library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
document()
Display_clusteraccident_serious(accidents2017)
#loading the necessary libraries
library(TrafficAnalysis)
library(sf)
library(leaflet)
library(tidyverse)
library(gganimate)
library(gifski)
library(ggtext)
#library(viridis)
data<-perform_weekdays_analysis(accidents2017)
p <- ggplot(data, aes(x = day_of_week, y = num_accidents)) +
geom_bar(stat = "identity", fill = "magenta", alpha = 0.5) +
labs(title = "Accidents in Barcelona in 2017",
x = "Day of the week",
y = "Number of accidents") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Set the figure size
options(repr.plot.width = 12, repr.plot.height = 7)
# Print the plot
print(p)
# image(p,col=viridis(200))
#Location based Analysis
Display_Serious_injuries(accidents2017)
Display_clusteraccident_serious(accidents2017)
#This function can be used to calculate kernel density estimates for each cell in a grid. The kernel density estimation (KDE) can be customised using the bandwidth and bandwidth_adjust arguments.If you do not specify any optional arguments, hotspot_kde() will try to choose reasonable default values. The KDE algorithm requires projected co-ordinates (i.e. not longitudes and latitudes), so we must first transform the data to use an appropriate local projected co-ordinate system
#Based on the result ,we can see that the accidents are more concentrated on the city center
output <- capture.output({
results <- perform_hotspot_kde(accidents2017)
ggplot() +
ggspatial::annotation_map_tile(type = "cartolight", zoomin = 0, quiet = TRUE) +
geom_sf(
mapping = aes(fill = kde),
data = results,
alpha = 0.75,
colour = NA
) +
scale_fill_distiller(direction = 1)
})
# Filter out lines containing the progress information
clean_output <- output[!grepl("^Done:", output)]
# Print the cleaned output
cat(clean_output, sep = "\n")
devtools::document()
